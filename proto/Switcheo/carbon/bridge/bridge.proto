syntax = "proto3";
package Switcheo.carbon.bridge;

import "cosmos/base/v1beta1/coin.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/timestamp.proto";
import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";

// this line is used by starport scaffolding # proto/tx/import

option go_package = "github.com/Switcheo/carbon/x/bridge/types";
option (gogoproto.goproto_getters_all) = false;

message BridgeState {
  uint64 id = 1;
  string name = 2;
  bool is_enabled = 3;
}

// each bridge have multiple connections to different chains
message Connection {
  string connection_id = 1; // = bridgeName/chainId
  uint64 bridge_id = 2;
  string chain_id = 3;
  string chain_display_name = 4;
  string gateway_address = 5;
  string encoding = 6;
  string escrow_address = 7 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  bool is_enabled = 8;
}

message ControllerContracts {
  string id = 1;
  string token_controller = 2;
}

message ControllersToUpdate {
  google.protobuf.StringValue token_controller = 1
      [ (gogoproto.wktpointer) = true ];
}

// each connection can have multiple external tokens, which contains the mapping
// to native denom
message ExternalTokenMapping {
  string connection_id = 1;
  bool is_enabled = 2;
  bool is_carbon_owned = 3;
  string external_address = 4;
  string denom = 5; // corresponding carbon native denom
}

// contracts from external chains that can be executed by carbon
message ExecutableContract {
  string connection_id = 1;
  string address = 2;
}

// RelayDetails defines the details of the relay
message RelayDetails {
  string fee_receiver_address = 1
      [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  string fee_sender_address = 2
      [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  cosmos.base.v1beta1.Coin fee = 3 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Coin",
    (gogoproto.nullable) = false
  ];
  int64 block_created_at = 4;
  google.protobuf.Int64Value block_sent_at = 5
      [ (gogoproto.wktpointer) = true ];
}